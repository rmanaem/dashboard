{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NeRV","text":"<p>Neuroimaging Rresults Visualization is a Python-based web interface designed for visualizing neuroimaging results obtained from continuous testing of neuroimaging data across software pipelines. It utilizes Plotly Dash, Dash Bootstrap Components, and pandas to provide an interactive and informative visualization experience.\\ NeRV is released as a PyPI package, available here. Explore the demo and experience NeRV in action firsthand. For more information, refer to the documentation.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>Install NeRV using pip:</p> <pre><code>pip install nerv\n</code></pre>"},{"location":"#example-usage","title":"Example usage","text":"<p>In order for NeRV to generate and populate plots the underlying app requires access to the directory that houses subdirectories, which in turn contain the JSON files to be visualized. The path to directory can be passed to the app as input to the <code>start</code> function.</p> <pre><code>from nerv import app\n\napp.start(\"path-to-data-directory\")\n</code></pre> <p>After executing the file containing the above code snippet, a local server is started at port 8050 (by default). You can access the running NeRV application using a browser through the URL <code>localhost:8050</code>.</p> <p>Once there you you will find your experiment directories presented as cards. By selecting each card, you can visualize the plots corresponding to the data in the respective experiment directory.</p> <p></p>"},{"location":"deployment/","title":"Deployment","text":"<p>To deploy your NeRV app, you can utilize Gunicorn. Simply follow the instructions outlined in the Dash documentation here, making the necessary adjustment in the app.py module content:</p> <p>app.py</p> <pre><code>from nerv import app\n\nserver = app.start(\"path-to-data-directory\", False)\n</code></pre> <p>Note</p> <p>When the <code>local</code> parameter of the <code>start</code> function is set to <code>False</code>, it will return the <code>app.server</code> object. This object represents the underlying Flask server that drives the Dash application. <code>app.server</code> object can be utilized to customize and extend the NeRV application, going beyond the default functionality offered. For more details, refer to the Flask documentation.</p> <p>For a demonstration, please refer to nerv-demo.</p>"},{"location":"limitations/","title":"Limitations","text":"<p>NeRV leverages Dash's built-in sequential color scales to differentiate pipelines within the same JSON file. This enforces is a limitation on the number of pipelines per file and the number of JSON files per experiment that NeRV can visualize.</p> <p>Info</p> <p>The maximum number of pipelines allowed varies between 7 and 12, depending on the file system configuration and the assigned color scale for each pipeline, see the table below. Additionally, there is a maximum limit of 8 files per experiment directory.</p> color scale pipeline limit Teal 7 OrRd 9 Purp 7 Green 9 Pinkyl 7 Brwnyl 7 solar 12 turbid 12"},{"location":"structure/","title":"Directory and file structure","text":""},{"location":"structure/#directory-structure","title":"Directory structure","text":"<p>In order to generate and populate plots, the <code>start</code> function requires access to the directory housing subdirectories, which in turn contain JSON files to be visualized.</p> <p>Here is an example of the directory structure:</p> <pre><code>.\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 internal\n\u2502      \u251c\u2500\u2500 experiment1\n|      |    \u2514\u2500\u2500 compass-nd.json\n|      |\n|      \u251c\u2500\u2500 experiment2\n|      |    \u251c\u2500\u2500 prevent-AD.json\n|      |    \u2514\u2500\u2500 compass-nd.json\n|      |\n\u2502      \u2514\u2500\u2500 experiment3\n|           \u2514\u2500\u2500 prevent-AD.json\n</code></pre>"},{"location":"structure/#data-file-structure","title":"Data file structure","text":"<p>NeRV processes JSON files that adhere to a specific format.</p> <p>Info</p> <p>For a more comprehensive example, please refer to this link.</p> <p>Below is a portion of the file that follows this specific format as an example of its structure:</p> <pre><code>{\n  \"sub-1004359_ses-PREBL00_run-001_T1w.nii.gz\": {\n    \"FSL\": {\n      \"FSL_First\": {\n        \"inputID\": 3541682,\n        \"toolConfigID\": 721,\n        \"taskID\": 1874664,\n        \"status\": \"Completed\",\n        \"outputID\": 3663588,\n        \"isUsed\": true\n      },\n      \"Subfolder_File_Extractor_FSL\": {\n        \"inputID\": 3663588,\n        \"toolConfigID\": 2094,\n        \"taskID\": 1874748,\n        \"status\": \"Completed\",\n        \"outputID\": 3663636,\n        \"isUsed\": true\n      },\n      \"FSL_Stats\": {\n        \"inputID\": 3663636,\n        \"toolConfigID\": 1698,\n        \"taskID\": 1874769,\n        \"status\": \"Completed\",\n        \"outputID\": 3663651,\n        \"isUsed\": true\n      },\n      \"Result\": {\n        \"result\": \"1715\",\n        \"isUsed\": true\n      }\n    },\n    \"FreeSurfer\": {\n      \"FreeSurfer_Recon_all\": {\n        \"inputID\": 3541682,\n        \"toolConfigID\": 583,\n        \"taskID\": 1874685,\n        \"status\": \"Completed\",\n        \"outputID\": 3663675,\n        \"isUsed\": true\n      },\n      \"Subfolder_File_Extractor_FreeSurfer_1\": {\n        \"inputID\": 3663675,\n        \"toolConfigID\": 2094,\n        \"taskID\": 1874793,\n        \"status\": \"Completed\",\n        \"outputID\": 3663702,\n        \"isUsed\": true\n      },\n      \"Subfolder_File_Extractor_FreeSurfer_2\": {\n        \"inputID\": 3663702,\n        \"toolConfigID\": 2094,\n        \"taskID\": 1881855,\n        \"status\": \"Completed\",\n        \"outputID\": 3673260,\n        \"isUsed\": true\n      },\n      \"Result\": {\n        \"result\": \"3900.6\",\n        \"isUsed\": true\n      }\n    }\n  },\n}\n</code></pre>"}]}